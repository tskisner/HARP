#!@PYTHON@

import os
import sys
import pyfits
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.collections import PolyCollection
from matplotlib.colors import colorConverter

plt.rcParams[ 'font.size' ] = 14
plt.rcParams[ 'axes.titlesize' ] = 'xx-large'
plt.rcParams[ 'axes.labelsize' ] = 'large'
plt.rcParams[ 'xtick.labelsize' ] = 'large'
plt.rcParams[ 'ytick.labelsize' ] = 'large'

rffile = 'harp_spec_Rf.fits'
rtfile = 'harp_spec_Rtruth.fits'
errfile = 'harp_spec_Rf-err.fits'
rfskyfile = 'harp_spec_Rfsky.fits'

dotruth = False
if ( os.path.isfile( rtfile ) ):
	dotruth = True

ffile = 'harp_image_f-project.fits'
tfile = 'harp_image_truth-project.fits'

doimg = False
if ( os.path.isfile(ffile) ):
	doimg = True

#cc = lambda arg: colorConverter.to_rgba(arg, alpha=0.6)

def img2verts ( img, wave_vals ):
	nspec = img.shape[0]
	nlambda = img.shape[1]
	z = np.arange ( nspec )
	colors = []

	verts = []
	for spec in z:
		frac = float(spec) / float(nspec)
		colors.append( (1.0-frac, frac, frac) )
		vals = img[spec,:]
		vals[0] = 0
		vals[-1] = 0
		verts.append( list( zip( wave_vals, vals ) ) )
	return verts, z, colors

# first, read image domain products

if ( doimg ):
	img_data = pyfits.getdata ( ffile, 0 )

	if ( dotruth ):
		img_truth = pyfits.getdata ( tfile, 0 )
		img_resid = img_data - img_truth

	fig = plt.figure( figsize=(24, 4), dpi=600 )

	imgmax = np.max ( img_data )
	imgmin = np.min ( img_data )
	plotmax = imgmax / 10
	plotmin = imgmin

	ax = fig.add_subplot(111)
	#ax = fig.add_subplot(211)
	ax.set_title( 'Slice of Extracted Spectra' )
	ax.get_xaxis().set_visible(False)
	ax.get_yaxis().set_visible(False)

	im = ax.imshow( img_data, aspect='equal', cmap=cm.get_cmap('spectral',1024), vmin=plotmin, vmax=plotmax )

	plt.savefig( 'harp_image_f-projected.png', bbox_inches='tight' )
	plt.clf()

if ( dotruth ):
	fig = plt.figure( figsize=(24, 4), dpi=600 )

	ax = fig.add_subplot(111)
	#ax = fig.add_subplot(212)
	ax.set_title( 'Slice of Extracted Spectra Minus Truth' )
	ax.get_xaxis().set_visible(False)
	ax.get_yaxis().set_visible(False)

	im = ax.imshow( img_resid, aspect='equal', cmap=cm.get_cmap('spectral',1024), vmin=plotmin, vmax=plotmax )

	plt.savefig( 'harp_image_f-truth-projected.png', bbox_inches='tight' )
	plt.clf()

# now plot spectral products

img = pyfits.getdata ( rffile, 0 )
lambda_vals = pyfits.getdata ( rffile, 1 )
if ( lambda_vals.ndim > 1 ):
	lambda_vals = lambda_vals[0]

if ( dotruth ):
	truth = pyfits.getdata ( rtfile, 0 )
	resid = img - truth

max_height = np.max ( img )
min_height = np.min ( img )

dataverts, datazs, datacolors = img2verts ( img, lambda_vals )

edges = []
for z in datazs:
	edges.append( (0.0, 0.0, 0.0) )

#print verts[0]

fig = plt.figure( figsize=(12, 8), dpi=600 )

ax = fig.add_subplot(111, projection='3d')
#ax = fig.add_subplot(121, projection='3d')
ax.set_title( 'Slice of Extracted Spectra' )

ax.view_init( 30, 250 )

poly = PolyCollection( dataverts, facecolors=datacolors, edgecolors=edges, closed=False )
poly.set_alpha(0.7)

ax.add_collection3d( poly, zs=datazs, zdir='y' )

ax.set_xlabel('Wavelength')
ax.set_xlim3d(lambda_vals[0], lambda_vals[-1])
ax.set_ylabel('Spectrum')
ax.set_ylim3d(0, datazs.shape[0])
ax.set_zlabel('')
#ax.set_zlabel('Amplitude')
ax.set_zlim3d(0, max_height)

#plt.show()

plt.savefig( 'harp_spec_Rf.png', bbox_inches='tight' )
plt.clf()


if ( dotruth ):
	residverts, residzs, residcolors = img2verts ( resid, lambda_vals )

	fig = plt.figure( figsize=(12, 8), dpi=600 )

	ax = fig.add_subplot(111, projection='3d')
	#ax = fig.add_subplot(122, projection='3d')
	ax.set_title( 'Slice of Extracted Spectra Minus Truth' )

	ax = fig.gca( projection='3d' )
	ax.view_init( 30, 250 )

	poly = PolyCollection( residverts, facecolors=residcolors, edgecolors=edges, closed=False )
	poly.set_alpha(0.7)

	ax.add_collection3d( poly, zs=residzs, zdir='y' )

	ax.set_xlabel('Wavelength')
	ax.set_xlim3d(lambda_vals[0], lambda_vals[-1])
	ax.set_ylabel('Spectrum')
	ax.set_ylim3d(0, residzs.shape[0])
	ax.set_zlabel('')
	#ax.set_zlabel('Amplitude')
	ax.set_zlim3d(0, max_height)

	#plt.show()

	plt.savefig( 'harp_spec_Rf-Rtruth.png', bbox_inches='tight' )
	plt.clf()

if ( os.path.isfile( rfskyfile ) ):
	rfsky = pyfits.getdata ( rfskyfile, 0 )

	max_height = np.max ( rfsky )
	min_height = np.min ( rfsky )

	rfskyverts, rfskyzs, rfskycolors = img2verts ( rfsky, lambda_vals )

	fig = plt.figure( figsize=(12, 8), dpi=600 )

	ax = fig.add_subplot(111, projection='3d')
	#ax = fig.add_subplot(122, projection='3d')
	ax.set_title( 'Slice of Extracted Spectra Minus Truth' )

	ax = fig.gca( projection='3d' )
	ax.view_init( 30, 250 )

	poly = PolyCollection( rfskyverts, facecolors=rfskycolors, edgecolors=edges, closed=False )
	poly.set_alpha(0.7)

	ax.add_collection3d( poly, zs=rfskyzs, zdir='y' )

	ax.set_xlabel('Wavelength')
	ax.set_xlim3d(lambda_vals[0], lambda_vals[-1])
	ax.set_ylabel('Spectrum')
	ax.set_ylim3d(0, rfskyzs.shape[0])
	ax.set_zlabel('')
	#ax.set_zlabel('Amplitude')
	ax.set_zlim3d(0, max_height)

	#plt.show()

	plt.savefig( 'harp_spec_Rfsky.png', bbox_inches='tight' )
	plt.clf()

#fig = py.figure( figsize=(10, 24), dpi=300 )

#frame1 = fig.add_subplot(131)
#py.title( "Input Spectra" )
#im1 = frame1.imshow(imgtruth, aspect='equal', cmap=cm.get_cmap('jet', 100) )
#fig.colorbar(im1)

#frame2 = fig.add_subplot(132)
#py.title( "Resolution Convolved Input" )
#im2 = frame2.imshow(imgrt, aspect='equal', cmap=cm.get_cmap('jet', 100) )
#fig.colorbar(im2)

#frame3 = fig.add_subplot(133)
#py.title( "Solution" )
#im3 = frame3.imshow(imgrf, aspect='equal', cmap=cm.get_cmap('jet', 100) )
#fig.colorbar(im3)

# frame2 = fig.add_subplot(212)
# im2 = frame2.imshow(hits, aspect='equal', cmap=cm.get_cmap('gist_heat', 100), vmin=0, vmax=500)
# fig.colorbar(im2)
# py.xlim(100,250)
# py.ylim(150,250)
# im2.axes.get_xaxis().set_visible(False)
# im2.axes.get_yaxis().set_visible(False)

#py.savefig('result_spectra.png')

